#!/usr/bin/env -S pipenv run python3
"""This provides the REST API used to query the state of the 
   processing and retrieval requests"""
import _preamble
import argparse
from pathlib import Path
from ami import Ami
from ami.package_factory import PackageFactory
from ami.package import Package
import logging
import json
import falcon
from gunicorn.app.base import BaseApplication
import gunicorn.glogging
import daemon


ami = Ami()
my_config = ami.get_config()
logger = logging.getLogger()

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--debug", default=False, action="store_true", help="Turn on debugging")
    parser.add_argument("--noauth", default=False, action="store_true", help="Disable authorization")
    args = parser.parse_args()
    if not args.debug:
        logger.setLevel(logging.INFO)
    
    app = falcon.App()
    if not args.noauth:
        app.add_middleware(AuthMiddleWare())
        
    pkgresource = PackageResource()
    app.add_route("/api/v1/packages", pkgresource, suffix="packages")
    app.add_route("/api/v1/packages/by-state/{state}", pkgresource, suffix="packages")
    app.add_route("/api/v1/packages/by-id/{pkgid}", pkgresource, suffix="packages")
    app.add_route("/api/v1/package/{pkgid}", pkgresource, suffix="package")
    app.add_route("/api/v1/package/{pkgid}/{timestamp}", pkgresource, suffix="package")
    app.add_route("/api/v1/states", pkgresource, suffix='states')
    RestServiceAppWrapper(app, args.debug).run()


class AuthMiddleWare:    
    def process_request(self, req, resp):
        token = req.get_header('Authorization')
        if token is None:
            raise falcon.HTTPUnauthorized(title="Authorization header missing", description="Supply a valid Authentication header")
        try:
            authfile = ami.resolve_path(my_config['authfile'])
            authtoken = authfile.read_text().strip()
        except Exception as e:
            raise falcon.HTTPInternalServerError(title="Couldn't get authorization token", descriptin="Server misconfiguration:  can't read authfile")
        
        if token != authtoken:
            raise falcon.HTTPUnauthorized(title="Authorization token mismatch", description="The authorization token supplied doesn't match the expected token")


class RestServiceAppWrapper(BaseApplication):
    def __init__(self, application, debug=False):
        self.application = application
        self.debug = debug
        super().__init__()

    def load(self):
        return self.application

    def load_config(self):
        "Inject the settings from the application config into gunicorn"
        config = {key: value for key, value in my_config['gunicorn'].items()
                  if key in self.cfg.settings and value is not None}
        # for the file-based keys, resolve the paths
        for k in ('accesslog', 'errorlog', 'pidfile'):
            config[k] = ami.resolve_path(config[k])
        for key, value in config.items():
            self.cfg.set(key, str(value))

        # override some values with debug-specific values
        if self.debug:
            self.cfg.set('loglevel', 'debug')
            self.cfg.set('workers', 1)
            self.cfg.set('errorlog', '-')

        # fixed values
        self.cfg.set('capture_output', True)
        self.cfg.set('proc_name', ami.get_application())

        if(self.debug):
            print(self.cfg)


# Here's the actual application resources
class PackageResource:
    def __init__(self):
        self.ami = Ami()        

    def on_get_packages(self, req, resp, state=None, pkgid=None):
        try:
            pf = PackageFactory(ami)
            if state is None and pkgid is None:            
                res = pf.ids()
            elif state is not None:            
                res = [p.get_id() for p in pf.packages_by_state(state)]
            elif pkgid is not None:
                res = pf.package_timestamps(pkgid)
            resp.text = json.dumps(res)
            resp.status = falcon.HTTP_200
        except Exception as e:           
            resp.text = json.dumps({'error': str(e)})
            resp.status = falcon.HTTP_500

    
    def on_get_package(self, req, resp, pkgid, timestamp=None):
        try:
            pf = PackageFactory(ami)
            res = pf.get_package(pkgid, timestamp)
            res.data['_id'] = str(res.data['_id'])
            resp.text = json.dumps(res.data)
            resp.status = falcon.HTTP_200
        except Exception as e:           
            resp.text = json.dumps({'error': str(e)})
            resp.status = falcon.HTTP_500        
        
 

    def on_get_states(self, req, resp):
        resp.text = json.dumps(list(Package.states.keys()))
        resp.status = falcon.HTTP_200









if __name__ == "__main__":
    main()

