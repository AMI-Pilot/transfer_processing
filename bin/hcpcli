#!/usr/bin/env python3
"CLI to manage the files on HCP for this project"
import _preamble
import argparse
from pathlib import Path
from ami import Ami
from ami.package_factory import PackageFactory
from ami.package import Package
from iulcore.ius3 import IUS3
import logging
import yaml

logger = logging.getLogger()
ami = Ami()
my_config = ami.get_config()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--debug", default=False, action="store_true", help="Turn on debugging")
    s = parser.add_subparsers(dest="action", help="Action", required=True)
    p = s.add_parser("ls")
    p.add_argument("prefix", nargs="*", help="Prefixes to list")
    p = s.add_parser("put")
    p.add_argument("localfile", help="Local file to upload")
    p.add_argument("key", help="S3 key for the new object")
    p = s.add_parser("get")
    p.add_argument("key", help="S3 object key to retrieve")
    p.add_argument("localfile", help="Where to store the object")
    p = s.add_parser("rm")
    p.add_argument("key", help="S3 object key to remove")
    p = s.add_parser("exists")
    p.add_argument("key", help="S3 object key to check")
    p = s.add_parser("stat")
    p.add_argument("key", help="S3 object key to check")
    args = parser.parse_args()
    if not args.debug:
        logger.setLevel(logging.INFO)
 
    my_config = ami.get_config("distribute_packages")
    hcp = IUS3(my_config['hcp']['username'],
               my_config['hcp']['password'],
               my_config['hcp']['hostname'],
               my_config['hcp']['bucket'])
    core_prefix = my_config['switchyard']['unit'] + "/"


    if args.action == "ls":
        if not args.prefix:
            args.prefix = [core_prefix]
        for prefix in args.prefix:
            if not prefix.startswith(core_prefix):
                logger.warning(f"Skipping {prefix} because it doesn't start with {core_prefix}")
                continue
            for o in hcp.list_objects(prefix):
                print(f"{o['size']:12d} {o['last_modified']} {o['key']}")
        
    elif args.action == "put":
        if not args.key.startswith(core_prefix):
            logging.error(f"Object keys must start with {core_prefix}")
            exit(1)
        with open(args.localfile, "rb") as f:
            hcp.put(args.key, f)            
    elif args.action == "get":
        if not args.key.startswith(core_prefix):
            logging.error(f"Object keys must start with {core_prefix}")
            exit(1)
        with open(args.localfile, "wb") as f:
            hcp.get(args.key, f)
    elif args.action == "rm":
        if not args.key.startswith(core_prefix):
            logging.error(f"Object key must start with {core_prefix}")
            exit(1)
        hcp.delete(args.key)
    elif args.action == "exists":
        print(hcp.exists(args.key))
    elif args.action == "stat":
        print(yaml.safe_dump(hcp.stat(args.key)))



if __name__ == "__main__":
    main()