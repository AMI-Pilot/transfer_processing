#!/usr/bin/env -S pipenv run python3
"For debugging reset the object to the accepted state and clear the log"
import _preamble
import argparse
from ami import Ami
from ami.package_factory import PackageFactory
import logging
from pathlib import Path

logger = logging.getLogger()
ami = Ami()

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--debug", default=False, action="store_true", help="Turn on debugging")
    parser.add_argument("--doit", default=False, action="store_true", help="Really do the action")    
    parser.add_argument("id", nargs="+", help="Package spec to reset")
    args = parser.parse_args()

    if not args.debug:
        logger.setLevel(logging.INFO)

    pf = PackageFactory(ami)
    workspace = ami.get_directory('workspace')
    packages = pf.find_packages(*args.id)

    for p in packages:
        try:
            if not (workspace / p.get_dirname()).exists():
                logger.warning(f"Skipping {p.get_id()} since it doesn't have a copy in the working directory")
            else:
                if args.doit:
                    p.reset()
                else:
                    logger.info(f"Skipping {p.get_id()} because the --doit flag wasn't set")
                
        except ValueError as e:
            logging.error(f"Cannot reset state for {p.get_id()}/{p.get_timestamp}: {e}")
            continue


if __name__ == "__main__":
    main()