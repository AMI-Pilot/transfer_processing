#!/usr/bin/env -S pipenv run python3

import _preamble
import argparse
from pathlib import Path
from ami import Ami
from ami.package_factory import PackageFactory
from ami.package import Package
from time import time
import hashlib
import yaml
import logging
import zipfile
from concurrent.futures import Future, ProcessPoolExecutor, ThreadPoolExecutor, as_completed      

logger = logging.getLogger()
ami = Ami()
my_config = ami.get_config()

def main():    
    parser = argparse.ArgumentParser()
    parser.add_argument("--debug", default=False, action="store_true", help="Turn on debugging")
    args = parser.parse_args()
    if not args.debug:
        logger.setLevel(logging.INFO)
    
    pf = PackageFactory(ami)
    dropbox = ami.get_directory('dropbox')
    workspace = ami.get_directory('workspace')    
    
    

    # scan dropbox for zipped packages.  If they exist, unzip them, rename them
    # to .transferred, and then delete the zip if it was successful.
    
    with ProcessPoolExecutor(max_workers=my_config['concurrent_unzips']) as ppe:            
        for z in dropbox.glob("*.zip"):                
            ppe.submit(unzip_package, z)
    
        
    # Look for tranferred directories
    for pkgdir in dropbox.glob("*.transferred"):
        if not pkgdir.is_dir() or pkgdir.stat().st_mtime > time() - my_config.get('age', 600):
            # file isn't a directory or it isn't old enough.
            continue

        pkg_id = pkgdir.stem

        overwrite = False
        if pf.package_exists(pkg_id):
            # leave a message in the old one that it is going to be overwritten
            old = pf.get_package(pkg_id)            
            overwrite = True

        pkg = Package.create(ami, pkg_id)        
        if overwrite:
            old.log("warn", f"This package is being overwritten by a new version with timestamp {pkg.get_timestamp()}")
            pkg.log("info", f"This package overwrites timestamp {old.get_timestamp()}")

        pkg.set_state('validating')
        errors = []
        # make sure it looks like a bag
        if not (pkgdir / "bagit.txt").exists():
            errors.append("bagit.txt doesn't exist.  Not a valid bag")
        
        if not errors:
            try:
                with open(pkgdir / "bag-info.txt") as f:
                    baginfo = yaml.safe_load(f)
                size, filecount = [int(x) for x in str(baginfo.get('Payload-Oxum', '-1.-1')).split('.')]
                if size < 0:
                    errors.append(f"Payload oxum seems weird.  It is: {size}.{filecount}")
                csize = cfcount = 0                
                for f in Path(pkgdir, "data").iterdir():
                    csize += f.stat().st_size
                    cfcount += 1
                if csize != size:
                    errors.append(f"Payload oxum specifies a size of {size}, but we got {csize}")
                if cfcount != filecount:
                    errors.append(f"Payload oxum specifies a file count pf {filecount}, but we got {cfcount}")

            except IOError as e:
                errors.append(f"Trouble processing bag-info.txt: {e}")

        # load the md5 manifests
        if not errors:            
            md5s = {}
            try:
                for manfile in ('tagmanifest-md5.txt', 'manifest-md5.txt'):
                    with open(pkgdir / manfile) as f:
                        for line in f.readlines():
                            line = line.strip()
                            md5, filename = line.split(' ', 1)
                            md5s[filename] = md5.lower()
            except IOError as e:
                errors.append(f"IOError when loading MD5s from manifests: {e}")

        # load the md5 manifests
        if not errors:
            futures = {}
            with ProcessPoolExecutor(max_workers=my_config['concurrent_md5s']) as ppe:            
                for filename, md5 in md5s.items():    
                    futures[filename] = ppe.submit(verify_file, pkgdir, filename, md5)
            for f in futures.values():
                res = f.result()
                if res is not None:
                    errors.append(res)

        # there should be a marc.xml or an ead.xml file
        if not ((pkgdir / "marc.xml").exists() or (pkgdir / "ead.xml").exists()):
            errors.append("Neither marc.xml nor ead.xml is present")

        # there should also be a mets.xml file in data
        if not (pkgdir / "data/mets.xml").exists():
            errors.append("The package doesn't contain a mets file")


        # TODO: Additional basic checks?


        if errors:            
            pkg.log("error", "Validation has failed:\n" + "\n".join(errors))
            pkg.set_state("validation_failed")
            continue
        

        pkg.set_state('shaping')
        try:
            # create the wrapper dir
            wpkgdir = workspace / pkg.get_dirname()
            wpkgdir.mkdir()
            # move the content (stripping the .transferred)
            pkgdir.rename(wpkgdir / pkg_id)
            # create the generated directory
            (wpkgdir / "generated").mkdir()
        except IOError as e:
            pkg.log("error", f"Cannot move package to workspace: {e}")
            pkg.set_state("local_failed")
            continue
        # Looks good
        pkg.set_state('accepted')



def unzip_package(z):
    ami.set_proc_title(action=f"unzipping {z.stem}")
    dropbox = ami.get_directory('dropbox')

    if not zipfile.is_zipfile(z):
        logger.debug(f"Skipping {z!s} since it is not a valid zip file")
        return
    # make sure there's not already a package dir here..
    if (dropbox / z.stem).exists() or (dropbox / (z.stem + ".transferred")).exists():
        logger.debug(f"Skipping {z!s} because a package directory also exists")
        return
    try:
        with zipfile.ZipFile(z, "r") as zfile:
            # Let's make sure that this is a reasonable zip file:
            # * one toplevel directory entry that matches the stem of the zip file
            # * it contains a <stem>/bagit.txt file
            zpath = zipfile.Path(zfile, '/')
            zroot = list(zpath.iterdir())
            if not (len(zroot) == 1 and zroot[0].is_dir() and zroot[0].name == z.stem):                    
                logger.debug(f"Skipping {z} because it doesn't have a single root with the stem name")
                return

            zfile.extractall(dropbox)
            xfer = dropbox / (z.stem + ".transferred")
            (dropbox / z.stem).rename(xfer)
        
        z.unlink()
        logger.info(f"Zipped package {z!s} was extracted for processing")
    except Exception as e:
        logger.error(f"Cannot extract/rename {z}: {e}")



def verify_file(pkgdir, filename, md5):
    ami.set_proc_title(action=f"verifying {filename}")
    try:
        m = hashlib.md5()
        with open(pkgdir / filename, mode="rb") as d:
            for chunk in iter(lambda: d.read(4096 * 1024), b""):
                m.update(chunk)
        cmd5 = m.hexdigest()
        if md5.lower() != cmd5.lower():
            return(f"Invalid MD5 for {filename}:  got {cmd5}, but expected {md5}")            
    except IOError as e:
        return(f"IOError when generating md5s: {e}")
    return None



if __name__ == "__main__":
    main()